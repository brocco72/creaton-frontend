(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.HickoryDOMUtils = {}));
}(this, function (exports) { 'use strict';

  function domExists() {
      return !!(window && window.location);
  }
  /*
   * Ignore popstate events that don't define event.state
   * unless they come from Chrome on iOS (because it emits
   * events where event.state is undefined when you click
   * the back button)
   */
  function ignorablePopstateEvent(event) {
      return (event.state === undefined && navigator.userAgent.indexOf("CriOS") === -1);
  }
  /*
   * IE 11 might throw, so just catch and return empty object when that happens
   */
  function getStateFromHistory() {
      try {
          return window.history.state || {};
      }
      catch (e) {
          return {};
      }
  }

  exports.domExists = domExists;
  exports.ignorablePopstateEvent = ignorablePopstateEvent;
  exports.getStateFromHistory = getStateFromHistory;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
