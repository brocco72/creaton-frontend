{"version":3,"file":"urql-devtools-exchange.min.js","sources":["../src/utils/createDebugMessage.ts","../src/utils/getDisplayName.ts","../src/utils/messaging.ts","../src/exchange.ts","../src/utils/hash.ts"],"sourcesContent":["import { DebugEventArg } from '@urql/core';\n\nexport const createDebugMessage = <T extends string>(debug: DebugEventArg<T>) =>\n  ({\n    type: 'debug-event',\n    source: 'exchange',\n    data: {\n      ...debug,\n      source: 'devtoolsExchange',\n      timestamp: Date.now(),\n    },\n  } as const);\n","export const getDisplayName = () => {\n  const defaultLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n\n  const trace = new Error().stack || '';\n\n  // Default stack trace limit\n  Error.stackTraceLimit = defaultLimit;\n\n  // Get name of function that called 'useQuery'\n  const findings = /(useQuery|useMutation|useSubscription).*\\n\\s*at (\\w+)/.exec(\n    trace\n  );\n\n  if (findings === null) {\n    return 'Unknown';\n  }\n\n  return findings[2];\n};\n","import {\n  ExchangeMessage,\n  DevtoolsMessage,\n  ExchangeConnectionInitMessage,\n} from '../types';\n\nexport interface Messenger {\n  addMessageListener: (\n    cb: (m: ExchangeMessage | DevtoolsMessage) => void\n  ) => void;\n  sendMessage: (m: ExchangeMessage) => void;\n}\n\nconst connectionInitMessage: ExchangeConnectionInitMessage = {\n  source: 'exchange',\n  type: 'connection-init',\n  version: __pkg_version__,\n};\n\n/** Create curried args for native environment. */\nexport const createNativeMessenger = (): Messenger => {\n  let listeners: Function[] = [];\n  let ws: WebSocket;\n  let timeout: NodeJS.Timeout | undefined;\n\n  const createConnection = () => {\n    timeout = undefined;\n    ws = new WebSocket('ws://localhost:7700');\n\n    ws.onopen = () => {\n      ws.send(JSON.stringify(connectionInitMessage));\n    };\n    ws.onclose = () => {\n      timeout = timeout || setTimeout(createConnection, 500);\n    };\n    ws.onerror = () => {\n      timeout = timeout || setTimeout(createConnection, 500);\n    };\n    ws.onmessage = (message) => {\n      try {\n        if (!message.data) {\n          return;\n        }\n\n        listeners.forEach((l) =>\n          l(JSON.parse(message.data) as ExchangeMessage | DevtoolsMessage)\n        );\n      } catch (err) {\n        console.warn(err);\n      }\n    };\n  };\n  createConnection();\n\n  return {\n    addMessageListener: (cb) => {\n      listeners = [...listeners, cb];\n    },\n    sendMessage: (message) => {\n      ws.readyState === ws.OPEN && ws.send(JSON.stringify(message));\n    },\n  };\n};\n\n/** Create curried args for browser environment. */\nexport const createBrowserMessenger = (): Messenger => {\n  let listeners: Function[] = [];\n\n  window.addEventListener('message', ({ data, isTrusted }) => {\n    if (!isTrusted || !data?.source) {\n      return;\n    }\n\n    listeners.forEach((cb) => cb(data));\n  });\n\n  const addMessageListener: Messenger['addMessageListener'] = (cb) =>\n    (listeners = [...listeners, cb]);\n  const sendMessage: Messenger['sendMessage'] = (m) =>\n    window.postMessage(JSON.parse(JSON.stringify(m)), window.location.origin);\n\n  sendMessage(connectionInitMessage);\n\n  return {\n    addMessageListener,\n    sendMessage,\n  };\n};\n","import { pipe, tap, take, toPromise } from 'wonka';\nimport { Exchange, Client, Operation, OperationResult } from '@urql/core';\nimport { DevtoolsExecuteQueryMessage } from './types';\nimport {\n  getDisplayName,\n  hash,\n  createDebugMessage,\n  createNativeMessenger,\n  createBrowserMessenger,\n  Messenger,\n} from './utils';\nimport { parse } from 'graphql';\n\ninterface HandlerArgs {\n  sendMessage: Messenger['sendMessage'];\n}\n\nconst curriedDevtoolsExchange: (a: Messenger) => Exchange = ({\n  sendMessage,\n  addMessageListener,\n}) => ({ client, forward }) => {\n  // Listen for messages from devtools\n  addMessageListener((message) => {\n    if (message.source !== 'devtools' || !(message.type in messageHandlers)) {\n      return;\n    }\n\n    messageHandlers[message.type]({ client, sendMessage })(message as any);\n  });\n\n  // Forward debug events to content script\n  client.subscribeToDebugTarget &&\n    client.subscribeToDebugTarget((event) =>\n      sendMessage({\n        type: 'debug-event',\n        source: 'exchange',\n        data: event,\n      })\n    );\n\n  return (ops$) =>\n    pipe(\n      ops$,\n      tap(handleOperation({ client, sendMessage })),\n      forward,\n      tap(handleResult({ client, sendMessage }))\n    );\n};\n\ninterface HandlerArgs {\n  client: Client;\n  sendMessage: Messenger['sendMessage'];\n}\n\n/** Handle outgoing operations */\nconst handleOperation = ({ sendMessage }: HandlerArgs) => (\n  operation: Operation\n) => {\n  if (operation.operationName === 'teardown') {\n    const msg = createDebugMessage({\n      type: 'teardown',\n      message: 'The operation has been torn down',\n      operation,\n    });\n\n    return sendMessage(msg);\n  }\n\n  const msg = createDebugMessage({\n    type: 'execution',\n    message: 'The client has received an execute command.',\n    operation,\n    data: {\n      sourceComponent: getDisplayName(),\n    },\n  });\n  return sendMessage(msg);\n};\n\n/** Handle new value or error */\nconst handleResult = ({ sendMessage }: HandlerArgs) => ({\n  operation,\n  data,\n  error,\n}: OperationResult) => {\n  if (error) {\n    const msg = createDebugMessage({\n      type: 'error',\n      message: 'The operation has returned a new error.',\n      operation,\n      data: {\n        value: error,\n      },\n    });\n    return sendMessage(msg);\n  }\n\n  const msg = createDebugMessage({\n    type: 'update',\n    message: 'The operation has returned a new response.',\n    operation,\n    data: {\n      value: data,\n    },\n  });\n  sendMessage(msg);\n};\n\n/** Handle execute request message. */\nconst handleExecuteQueryMessage = ({ client }: HandlerArgs) => (\n  message: DevtoolsExecuteQueryMessage\n) => {\n  const isMutation = /(^|\\W)+mutation\\W/.test(message.query);\n  const requestType = isMutation ? 'mutation' : 'query';\n  const op = client.createRequestOperation(\n    requestType,\n    {\n      key: hash(JSON.stringify(message.query)),\n      query: parse(message.query),\n    },\n    {\n      meta: {\n        source: 'Devtools',\n      },\n    }\n  );\n\n  pipe(client.executeRequestOperation(op), take(1), toPromise);\n};\n\n/** Handle connection initiated by devtools. */\nconst handleConnectionInitMessage = ({ sendMessage }: HandlerArgs) => () =>\n  sendMessage({\n    type: 'connection-acknowledge',\n    source: 'exchange',\n    version: __pkg_version__,\n  });\n\n/** Map of handlers for incoming messages. */\nconst messageHandlers = {\n  'execute-query': handleExecuteQueryMessage,\n  'connection-init': handleConnectionInitMessage,\n} as const;\n\nexport const devtoolsExchange = ((): Exchange => {\n  const isNative =\n    typeof navigator !== 'undefined' && navigator?.product === 'ReactNative';\n  const isSSR = !isNative && typeof window === 'undefined';\n\n  // Prod or SSR\n  if (process.env.NODE_ENV === 'production' || isSSR) {\n    return ({ forward }) => (ops$) => pipe(ops$, forward);\n  }\n\n  if (isNative) {\n    return curriedDevtoolsExchange(createNativeMessenger());\n  }\n\n  return curriedDevtoolsExchange(createBrowserMessenger());\n})();\n","// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n"],"names":["const","createDebugMessage","debug","type","source","data","timestamp","Date","now","getDisplayName","defaultLimit","Error","stackTraceLimit","Infinity","trace","stack","findings","exec","connectionInitMessage","version","m","window","postMessage","JSON","parse","stringify","location","origin","isNative","isSSR","messageHandlers","message","x","isMutation","test","query","op","client","createRequestOperation","key","h","let","i","l","length","charCodeAt","phash","meta","pipe","executeRequestOperation","take","toPromise","sendMessage","devtoolsExchange","navigator","product","process","env","NODE_ENV","ops$","forward","event","addMessageListener","subscribeToDebugTarget","tap","operation","operationName","msg","sourceComponent","handleOperation","error","value","handleResult","curriedDevtoolsExchange","ws","timeout","listeners","send","setTimeout","createConnection","forEach","err","console","warn","undefined","WebSocket","onopen","onclose","onerror","onmessage","cb","readyState","OPEN","createNativeMessenger","addEventListener","createBrowserMessenger"],"mappings":"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"}